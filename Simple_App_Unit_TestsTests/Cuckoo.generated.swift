// MARK: - Mocks generated from file: Simple_App_Unit_Tests/Home/HomeInteractor.swift at 2019-12-09 14:54:13 +0000

//
//  HomeInteractor.swift
//  Simple_App_Unit_Tests
//
//  Created by Alvaro Vinicius do Nascimento Fernandes on 03/12/19.
//  Copyright (c) 2019 Alvaro Vinicius do Nascimento Fernandes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import Cuckoo
@testable import Simple_App_Unit_Tests

import UIKit


 class MockHomeBusinessLogic: HomeBusinessLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomeBusinessLogic
    
     typealias Stubbing = __StubbingProxy_HomeBusinessLogic
     typealias Verification = __VerificationProxy_HomeBusinessLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomeBusinessLogic?

     func enableDefaultImplementation(_ stub: HomeBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     var getValue: Int {
        get {
            return cuckoo_manager.getter("getValue",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.getValue)
        }
        
    }
    

    

    
    
    
     func load(_ value: Int, _ target: Int)  {
        
    return cuckoo_manager.call("load(_: Int, _: Int)",
            parameters: (value, target),
            escapingParameters: (value, target),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.load(value, target))
        
    }
    

	 struct __StubbingProxy_HomeBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var getValue: Cuckoo.ProtocolToBeStubbedReadOnlyProperty<MockHomeBusinessLogic, Int> {
	        return .init(manager: cuckoo_manager, name: "getValue")
	    }
	    
	    
	    func load<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(_ value: M1, _ target: M2) -> Cuckoo.ProtocolStubNoReturnFunction<(Int, Int)> where M1.MatchedType == Int, M2.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int, Int)>] = [wrap(matchable: value) { $0.0 }, wrap(matchable: target) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeBusinessLogic.self, method: "load(_: Int, _: Int)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomeBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var getValue: Cuckoo.VerifyReadOnlyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "getValue", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func load<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(_ value: M1, _ target: M2) -> Cuckoo.__DoNotUse<(Int, Int), Void> where M1.MatchedType == Int, M2.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int, Int)>] = [wrap(matchable: value) { $0.0 }, wrap(matchable: target) { $0.1 }]
	        return cuckoo_manager.verify("load(_: Int, _: Int)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomeBusinessLogicStub: HomeBusinessLogic {
    
    
     var getValue: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
    }
    

    

    
     func load(_ value: Int, _ target: Int)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockHomeDataStore: HomeDataStore, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomeDataStore
    
     typealias Stubbing = __StubbingProxy_HomeDataStore
     typealias Verification = __VerificationProxy_HomeDataStore

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomeDataStore?

     func enableDefaultImplementation(_ stub: HomeDataStore) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    

	 struct __StubbingProxy_HomeDataStore: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	}

	 struct __VerificationProxy_HomeDataStore: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	}
}

 class HomeDataStoreStub: HomeDataStore {
    

    

    
}



 class MockHomeInteractor: HomeInteractor, Cuckoo.ClassMock {
    
     typealias MocksType = HomeInteractor
    
     typealias Stubbing = __StubbingProxy_HomeInteractor
     typealias Verification = __VerificationProxy_HomeInteractor

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: HomeInteractor?

     func enableDefaultImplementation(_ stub: HomeInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var presenter: HomePresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    
    
    
     override var getValue: Int {
        get {
            return cuckoo_manager.getter("getValue",
                superclassCall:
                    
                    super.getValue
                    ,
                defaultCall: __defaultImplStub!.getValue)
        }
        
    }
    

    

    
    
    
     override func load(_ value: Int, _ target: Int)  {
        
    return cuckoo_manager.call("load(_: Int, _: Int)",
            parameters: (value, target),
            escapingParameters: (value, target),
            superclassCall:
                
                super.load(value, target)
                ,
            defaultCall: __defaultImplStub!.load(value, target))
        
    }
    

	 struct __StubbingProxy_HomeInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var presenter: Cuckoo.ClassToBeStubbedOptionalProperty<MockHomeInteractor, HomePresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    
	    var getValue: Cuckoo.ClassToBeStubbedReadOnlyProperty<MockHomeInteractor, Int> {
	        return .init(manager: cuckoo_manager, name: "getValue")
	    }
	    
	    
	    func load<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(_ value: M1, _ target: M2) -> Cuckoo.ClassStubNoReturnFunction<(Int, Int)> where M1.MatchedType == Int, M2.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int, Int)>] = [wrap(matchable: value) { $0.0 }, wrap(matchable: target) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockHomeInteractor.self, method: "load(_: Int, _: Int)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomeInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var presenter: Cuckoo.VerifyOptionalProperty<HomePresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var getValue: Cuckoo.VerifyReadOnlyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "getValue", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func load<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(_ value: M1, _ target: M2) -> Cuckoo.__DoNotUse<(Int, Int), Void> where M1.MatchedType == Int, M2.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int, Int)>] = [wrap(matchable: value) { $0.0 }, wrap(matchable: target) { $0.1 }]
	        return cuckoo_manager.verify("load(_: Int, _: Int)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomeInteractorStub: HomeInteractor {
    
    
     override var presenter: HomePresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (HomePresentationLogic?).self)
        }
        
        set { }
        
    }
    
    
     override var getValue: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
    }
    

    

    
     override func load(_ value: Int, _ target: Int)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: Simple_App_Unit_Tests/Home/HomePresenter.swift at 2019-12-09 14:54:13 +0000

//
//  HomePresenter.swift
//  Simple_App_Unit_Tests
//
//  Created by Alvaro Vinicius do Nascimento Fernandes on 03/12/19.
//  Copyright (c) 2019 Alvaro Vinicius do Nascimento Fernandes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import Cuckoo
@testable import Simple_App_Unit_Tests

import UIKit


 class MockHomePresentationLogic: HomePresentationLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = HomePresentationLogic
    
     typealias Stubbing = __StubbingProxy_HomePresentationLogic
     typealias Verification = __VerificationProxy_HomePresentationLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: HomePresentationLogic?

     func enableDefaultImplementation(_ stub: HomePresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func perfect()  {
        
    return cuckoo_manager.call("perfect()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.perfect())
        
    }
    
    
    
     func tooClose()  {
        
    return cuckoo_manager.call("tooClose()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.tooClose())
        
    }
    
    
    
     func notSoGood()  {
        
    return cuckoo_manager.call("notSoGood()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.notSoGood())
        
    }
    
    
    
     func veryBad()  {
        
    return cuckoo_manager.call("veryBad()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.veryBad())
        
    }
    
    
    
     func showError()  {
        
    return cuckoo_manager.call("showError()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.showError())
        
    }
    

	 struct __StubbingProxy_HomePresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func perfect() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "perfect()", parameterMatchers: matchers))
	    }
	    
	    func tooClose() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "tooClose()", parameterMatchers: matchers))
	    }
	    
	    func notSoGood() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "notSoGood()", parameterMatchers: matchers))
	    }
	    
	    func veryBad() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "veryBad()", parameterMatchers: matchers))
	    }
	    
	    func showError() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresentationLogic.self, method: "showError()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomePresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func perfect() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("perfect()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func tooClose() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("tooClose()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func notSoGood() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("notSoGood()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func veryBad() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("veryBad()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func showError() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("showError()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomePresentationLogicStub: HomePresentationLogic {
    

    

    
     func perfect()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func tooClose()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func notSoGood()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func veryBad()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func showError()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockHomePresenter: HomePresenter, Cuckoo.ClassMock {
    
     typealias MocksType = HomePresenter
    
     typealias Stubbing = __StubbingProxy_HomePresenter
     typealias Verification = __VerificationProxy_HomePresenter

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: HomePresenter?

     func enableDefaultImplementation(_ stub: HomePresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var viewController: HomeDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func perfect()  {
        
    return cuckoo_manager.call("perfect()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.perfect()
                ,
            defaultCall: __defaultImplStub!.perfect())
        
    }
    
    
    
     override func tooClose()  {
        
    return cuckoo_manager.call("tooClose()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.tooClose()
                ,
            defaultCall: __defaultImplStub!.tooClose())
        
    }
    
    
    
     override func notSoGood()  {
        
    return cuckoo_manager.call("notSoGood()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.notSoGood()
                ,
            defaultCall: __defaultImplStub!.notSoGood())
        
    }
    
    
    
     override func veryBad()  {
        
    return cuckoo_manager.call("veryBad()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.veryBad()
                ,
            defaultCall: __defaultImplStub!.veryBad())
        
    }
    
    
    
     override func showError()  {
        
    return cuckoo_manager.call("showError()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.showError()
                ,
            defaultCall: __defaultImplStub!.showError())
        
    }
    

	 struct __StubbingProxy_HomePresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var viewController: Cuckoo.ClassToBeStubbedOptionalProperty<MockHomePresenter, HomeDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func perfect() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "perfect()", parameterMatchers: matchers))
	    }
	    
	    func tooClose() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "tooClose()", parameterMatchers: matchers))
	    }
	    
	    func notSoGood() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "notSoGood()", parameterMatchers: matchers))
	    }
	    
	    func veryBad() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "veryBad()", parameterMatchers: matchers))
	    }
	    
	    func showError() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockHomePresenter.self, method: "showError()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_HomePresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var viewController: Cuckoo.VerifyOptionalProperty<HomeDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func perfect() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("perfect()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func tooClose() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("tooClose()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func notSoGood() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("notSoGood()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func veryBad() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("veryBad()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func showError() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("showError()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class HomePresenterStub: HomePresenter {
    
    
     override var viewController: HomeDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (HomeDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func perfect()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func tooClose()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func notSoGood()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func veryBad()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func showError()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}

